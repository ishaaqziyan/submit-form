{"mappings":"AAAO,SAASA,EAAgBC,GAC5B,MAAMC,EAAmB,GAIzB,OAHID,EAAcE,OAAS,GAAGD,EAAOE,KAAK,gDAGnCF,CACT,CCNK,SAASG,EAAcC,GAC1B,MAAMJ,EAAmB,GAIzB,MAHK,eAAeK,KAAKD,IAAWJ,EAAOE,KAAK,2CAGzCF,CACT,CCFF,MAAMM,EAAgBC,SAASC,eAAe,YACxCC,EAAuBF,SAASC,eAAe,oBAE/CE,EAAaH,SAASC,eAAe,SACrCG,EAAoBJ,SAASC,eAAe,iBAE5CI,EAAYL,SAASC,eAAe,eAEpCK,EAAS,ICZR,MACHb,OAAsB,IAAIc,IAE1BC,IAAIC,EAAgBC,EAA8BC,EAAoBC,GACpEF,EAAWG,UAAUC,IAAI,eACzBH,EAAME,UAAUE,OAAO,UACvBJ,EAAMK,UAAYJ,EAClBK,KAAKxB,OAAOqB,IAAIL,EAClB,CAEAM,OAAON,EAAgBS,EAAyBP,GAC9CO,EAAML,UAAUE,OAAO,eACvBJ,EAAME,UAAUC,IAAI,UACpBG,KAAKxB,OAAO0B,OAAOV,EACrB,CAEAW,UACE,OAA4B,IAArBH,KAAKxB,OAAO4B,IACrB,GDJJ,SAASC,IACHhB,EAAOc,WAAajB,EAAWoB,MAAM7B,OAAS,GAAKK,EAAcwB,MAAM7B,OAAS,EAClFW,GAAWQ,UAAUE,OAAO,gBAE5BV,GAAWQ,UAAUC,IAAI,eAE7B,CAEAX,EAAWqB,iBAAiB,SAAUC,IACpC,MAAMC,EAAmB9B,EAAcO,EAAWoB,OAClD,GAAIG,EAAiBhC,OAAS,EAAG,CAC/B,MAAMiC,EAAkBD,EAAiBE,KAAK,QAC9CtB,EAAOE,IAAI,gBAAiBL,EAAYC,EAAmBuB,EAC7D,MACErB,EAAOS,OAAO,gBAAiBZ,EAAYC,GAE7CkB,GAAA,IAGFvB,EAAcyB,iBAAiB,SAAUC,IACvC,MAAMI,EAAqBtC,EAAgBQ,EAAcwB,OACzD,GAAIM,EAAmBnC,OAAS,EAAG,CACjC,MAAMiC,EAAkBE,EAAmBD,KAAK,QAChDtB,EAAOE,IAAI,8BAA+BT,EAAeG,EAAsByB,EACjF,MACErB,EAAOS,OAAO,8BAA+BhB,EAAeG,GAE9DoB,GAAA","sources":["src/shared/password-rules.ts","src/shared/username-rules.ts","src/frontend/signin.ts","src/frontend/field-error.ts"],"sourcesContent":["export function checkComplexity(plainPassword: string): string[] {\r\n    const errors: string[] = [];\r\n    if (plainPassword.length < 8) errors.push(\"Password must be at least 8 characters long.\");\r\n    \r\n  \r\n    return errors;\r\n  }","export function checkUsername(username: string): string[] {\r\n    const errors: string[] = [];\r\n    if (!/\\S+@\\S+\\.\\S+/.test(username)) errors.push(\"Must use email format: name@domain.tld.\");\r\n  \r\n  \r\n    return errors;\r\n  }","import { checkComplexity } from \"../shared/password-rules\";\r\nimport { checkUsername } from \"../shared/username-rules\";\r\nimport { FieldError } from \"./field-error\";\r\n\r\nconst passwordField = document.getElementById(\"password\") as HTMLInputElement;\r\nconst passwordInvalidLabel = document.getElementById(\"invalid-password\") as HTMLElement;\r\n\r\nconst emailField = document.getElementById(\"email\") as HTMLInputElement;\r\nconst emailInvalidLabel = document.getElementById(\"invalid-email\") as HTMLElement;\r\n\r\nconst submitBtn = document.getElementById(\"form-submit\");\r\n\r\nconst errors = new FieldError();\r\n\r\nfunction updateSubmitBtn(): void {\r\n  if (errors.isEmpty() && emailField.value.length > 0 && passwordField.value.length > 0) {\r\n    submitBtn?.classList.remove(\"btn-disabled\");\r\n  } else {\r\n    submitBtn?.classList.add(\"btn-disabled\");\r\n  }\r\n}\r\n\r\nemailField.addEventListener(\"input\", (_) => {\r\n  const usernameFailures = checkUsername(emailField.value);\r\n  if (usernameFailures.length > 0) {\r\n    const formattedErrors = usernameFailures.join(\"<br>\");\r\n    errors.set(\"invalid-email\", emailField, emailInvalidLabel, formattedErrors);\r\n  } else {\r\n    errors.remove(\"invalid-email\", emailField, emailInvalidLabel);\r\n  }\r\n  updateSubmitBtn();\r\n});\r\n\r\npasswordField.addEventListener(\"input\", (_) => {\r\n  const complexityFailures = checkComplexity(passwordField.value);\r\n  if (complexityFailures.length > 0) {\r\n    const formattedErrors = complexityFailures.join(\"<br>\");\r\n    errors.set(\"password-complexity-failure\", passwordField, passwordInvalidLabel, formattedErrors);\r\n  } else {\r\n    errors.remove(\"password-complexity-failure\", passwordField, passwordInvalidLabel);\r\n  }\r\n  updateSubmitBtn();\r\n});","export class FieldError {\r\n    errors: Set<string> = new Set<string>();\r\n  \r\n    set(errKey: string, inputField: HTMLInputElement, label: HTMLElement, labelText: string): void {\r\n      inputField.classList.add(\"input-error\");\r\n      label.classList.remove(\"hidden\");\r\n      label.innerHTML = labelText;\r\n      this.errors.add(errKey);\r\n    }\r\n  \r\n    remove(errKey: string, field: HTMLInputElement, label: HTMLElement): void {\r\n      field.classList.remove(\"input-error\");\r\n      label.classList.add(\"hidden\");\r\n      this.errors.delete(errKey);\r\n    }\r\n  \r\n    isEmpty(): boolean {\r\n      return this.errors.size === 0;\r\n    }\r\n  \r\n  }\r\n  \r\n  "],"names":["$065e265a0289c63a$export$2628422de354bd82","plainPassword","errors","length","push","$a01807554d1b7627$export$4929d86c6e4e281e","username","test","$36c1002890bc077f$var$passwordField","document","getElementById","$36c1002890bc077f$var$passwordInvalidLabel","$36c1002890bc077f$var$emailField","$36c1002890bc077f$var$emailInvalidLabel","$36c1002890bc077f$var$submitBtn","$36c1002890bc077f$var$errors","Set","set","errKey","inputField","label","labelText","classList","add","remove","innerHTML","this","field","delete","isEmpty","size","$36c1002890bc077f$var$updateSubmitBtn","value","addEventListener","_","usernameFailures","formattedErrors","join","complexityFailures"],"version":3,"file":"signin.js.map","sourceRoot":"../"}